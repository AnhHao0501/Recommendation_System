import streamlit as st
import pandas as pd
import pickle
import numpy as np
from surprise import Reader, Dataset, SVD, SVDpp, NMF, SlopeOne, KNNBasic, KNNBaseline, KNNWithMeans, KNNWithZScore, CoClustering, BaselineOnly
from surprise.model_selection.validation import cross_validate

# H√†m g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± t·ª´ content-based
def get_recommendations(df, ma_san_pham, cosine_sim, df_hinh, nums=5):
    matching_indices = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
    if not matching_indices:
        st.warning(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {ma_san_pham}")
        return pd.DataFrame()
    idx = matching_indices[0]

    # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:nums + 1]
    product_indices = [i[0] for i in sim_scores]

    # L·∫•y c√°c s·∫£n ph·∫©m g·ª£i √Ω
    recommended_products = df.iloc[product_indices]

    # G·∫Øn h√¨nh ·∫£nh t·ª´ df_hinh
    recommended_products_with_images = pd.merge(recommended_products, df_hinh[['ma_san_pham', 'hinh_anh']], on='ma_san_pham', how='left')
    
    return recommended_products_with_images

# H√†m hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m g·ª£i √Ω
def display_recommended_products(recommended_products, cols=5):
    for i in range(0, len(recommended_products), cols):
        col_list = st.columns(cols)
        for j, col in enumerate(col_list):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    st.write(f"### {product['ten_san_pham']}")
                    gia_ban_formatted = f"{product['gia_ban']:,.0f}".replace(",", ".")
                    gia_goc_formatted = f"{product['gia_goc']:,.0f}".replace(",", ".")
                    st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
                    st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")
                    expander = st.expander("M√¥ t·∫£")
                    product_description = product['mo_ta']
                    truncated_description = ' '.join(product_description.split()[:100]) + "..."
                    expander.write(truncated_description)

                    # Hi·ªÉn th·ªã h√¨nh ·∫£nh
                    if 'hinh_anh' in product and pd.notna(product['hinh_anh']):
                        image_path = product['hinh_anh']
                        
                        # Ki·ªÉm tra lo·∫°i t·ªáp h√¨nh ·∫£nh (PNG ho·∫∑c JPG)
                        if image_path.lower().endswith(('png', 'jpg', 'jpeg')):
                            st.image(image_path, use_container_width=True)  # Hi·ªÉn th·ªã ·∫£nh n·∫øu ƒë√∫ng ƒë·ªãnh d·∫°ng
                        else:
                            st.write("**ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ª£p l·ªá.**")
                    else:
                        st.write("**Kh√¥ng c√≥ ·∫£nh s·∫£n ph·∫©m**")

# H√†m g·ª£i √Ω s·∫£n ph·∫©m cho kh√°ch h√†ng d·ª±a tr√™n collaborative filtering
def recommendation_by_user(userId, df, df_products, algorithm):
    df_select = df[(df['ma_khach_hang'] == userId) & (df['so_sao'] >= 3)]
    df_select = df_select.set_index('ma_san_pham')
    df_score = pd.DataFrame(df['ma_san_pham'].unique(), columns=['ma_san_pham'])
    df_score['EstimateScore'] = df_score['ma_san_pham'].apply(lambda x: algorithm.predict(userId, x).est)
    df_score = df_score.sort_values(by=['EstimateScore'], ascending=False)
    df_score = df_score.drop_duplicates()
    df2_selected = df_products[['ma_san_pham', 'ten_san_pham', 'gia_ban', 'gia_goc', 'mo_ta']]
    df_score = df_score.merge(df2_selected, on='ma_san_pham', how='left')

    # Sau khi g·ª£i √Ω xong, g·∫Øn h√¨nh ·∫£nh
    df_score_with_images = pd.merge(df_score, df_hinh[['ma_san_pham', 'hinh_anh']], on='ma_san_pham', how='left')
    return df_score_with_images.head(5)

# T·∫£i d·ªØ li·ªáu
df_hinh = pd.read_csv('/mount/src/recommendation_system/product_recommendation-main/Hinhanh.csv')
df_products = pd.read_csv('San_pham_2xuly.csv')
df_customers = pd.read_csv('Khach_hang_2xuly.csv')
df = pd.read_csv('Danh_gia_final.csv')

# T·∫£i m√¥ h√¨nh
with open('product_surprise.pkl', 'rb') as f:
    algorithm_loaded = pickle.load(f)
with open('products_cosine_sim.pkl', 'rb') as f:
    cosine_sim_new = pickle.load(f)

limited_products = df_products.head(20)
limited_customers = df_customers.head(20)

# Giao di·ªán v·ªõi Streamlit
# Ti√™u ƒë·ªÅ trang
st.image('hasaki1.jpg', use_container_width=True)
st.title("üíé H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m Recommender System üíé")

# Menu ·ªü sidebar
menu = ["Business Objective","Build Project", "Hi·ªÉn th·ªã chart", "H·ªá th·ªëng g·ª£i √Ω"]
choice = st.sidebar.selectbox('Menu', menu)

st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:
                 Phan VƒÉn Minh & Cao Anh H√†o""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: Ms Ph∆∞∆°ng """)
st.sidebar.write("""#### Ng√†y b√°o c√°o t·ªët nghi·ªáp: 16/12/2024""")

# Ph·∫ßn l·ª±a ch·ªçn menu
if choice == 'Business Objective':
    st.subheader("Business Objective")
    st.write("""  
    ###### HASAKI.VN l√† h·ªá th·ªëng c·ª≠a h√†ng m·ªπ ph·∫©m ch√≠nh h√£ng v√† d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp chuy√™n s√¢u, v·ªõi m·∫°ng l∆∞·ªõi c·ª≠a h√†ng ph·ªß r·ªông tr√™n to√†n qu·ªëc. M·ª•c ti√™u c·ªßa h·ªç l√† n√¢ng cao tr·∫£i nghi·ªám mua s·∫Øm cho kh√°ch h√†ng th√¥ng qua vi·ªác cung c·∫•p nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p v√† ch·∫•t l∆∞·ª£ng cao, ƒë·ªìng th·ªùi th·∫•u hi·ªÉu s·ªü th√≠ch v√† nhu c·∫ßu c·ªßa kh√°ch h√†ng th√¥ng qua c√°c ƒë√°nh gi√° v√† t∆∞∆°ng t√°c c·ªßa h·ªç.

    ƒê·ªÉ ƒë√°p ·ª©ng nhu c·∫ßu ph√°t tri·ªÉn kinh doanh v√† t·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng, HASAKI.VN mu·ªën x√¢y d·ª±ng m·ªôt h·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m th√¥ng minh. H·ªá th·ªëng n√†y s·∫Ω gi√∫p kh√°ch h√†ng d·ªÖ d√†ng t√¨m th·∫•y s·∫£n ph·∫©m h·ªç c·∫ßn, t·ª´ ƒë√≥ th√∫c ƒë·∫©y doanh thu v√† c·∫£i thi·ªán s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng.

    ###### => Gi·∫£i ph√°p: 
    ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y, ch√∫ng t√¥i s·∫Ω √°p d·ª•ng hai ph∆∞∆°ng ph√°p thu·∫≠t to√°n Machine Learning trong Python:
    - **Content-Based Filtering**: D·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm c·ªßa s·∫£n ph·∫©m, h·ªá th·ªëng s·∫Ω g·ª£i √Ω c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± v·ªõi nh·ªØng s·∫£n ph·∫©m m√† kh√°ch h√†ng ƒë√£ xem ho·∫∑c ƒë√°nh gi√° cao.
    - **Collaborative Filtering**: D·ª±a tr√™n h√†nh vi mua s·∫Øm v√† ƒë√°nh gi√° c·ªßa c√°c kh√°ch h√†ng t∆∞∆°ng t·ª±, h·ªá th·ªëng s·∫Ω d·ª± ƒëo√°n nh·ªØng s·∫£n ph·∫©m m√† kh√°ch h√†ng c√≥ th·ªÉ th√≠ch, d·ª±a tr√™n nh·ªØng ng∆∞·ªùi d√πng c√≥ s·ªü th√≠ch gi·ªëng nhau.

    C·∫£ hai thu·∫≠t to√°n n√†y s·∫Ω gi√∫p h·ªá th·ªëng ƒë∆∞a ra nh·ªØng g·ª£i √Ω ch√≠nh x√°c v√† c√° nh√¢n h√≥a cho m·ªói kh√°ch h√†ng, ƒë·ªìng th·ªùi gi√∫p HASAKI.VN t·ªëi ∆∞u h√≥a vi·ªác ph√¢n ph·ªëi s·∫£n ph·∫©m v√† tƒÉng tr∆∞·ªüng doanh thu.
""")  
    st.image("2.png")

elif choice == 'Hi·ªÉn th·ªã chart':
    st.subheader("Bi·ªÉu ƒë·ªì Heatmap")
    st.write("L·∫•y m·ªôt ph·∫ßn nh·ªè trong Cosine_sim, t∆∞∆°ng ·ª©ng v·ªõi ma tr·∫≠n 18 x18. G·ªìm c√°c gi√° tr·ªã li√™n quan ƒë·∫øn 18 s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong danh s√°ch ƒë·ªÉ tr·ª±c quan ho√°")
    st.image('heatmap.png', use_container_width=True)

elif choice == 'Build Project':
    st.subheader("Build Project")

    # ·ªû ƒë√¢y s·∫Ω hi·ªÉn th·ªã ph·∫ßn n·ªôi dung c·ªßa Build Project
    st.image('thuat_toan.jpg', use_container_width=True)  # Hi·ªÉn th·ªã ·∫£nh banner
    st.write("### Recommendation System")
    st.write(""" 
    H·ªá th·ªëng g·ª£i √Ω t·∫°i Hasaki.vn ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n hai ph∆∞∆°ng ph√°p ch√≠nh:

    1. **L·ªçc n·ªôi dung (Content-Based Filtering)**: G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n ph√¢n t√≠ch ƒë·∫∑c ƒëi·ªÉm v√† n·ªôi dung m√¥ t·∫£ c·ªßa s·∫£n ph·∫©m, t·∫≠p trung v√†o s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c s·∫£n ph·∫©m.
    2. **L·ªçc c·ªông t√°c (Collaborative Filtering)**: G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n ph√¢n t√≠ch h√†nh vi c·ªßa ng∆∞·ªùi d√πng, t·∫≠n d·ª•ng d·ªØ li·ªáu t·ª´ c√°c kh√°ch h√†ng c√≥ s·ªü th√≠ch ho·∫∑c h√†nh vi t∆∞∆°ng t·ª±.
    """)

    # T·∫°o c√°c tab cho c√°c ph∆∞∆°ng ph√°p
    tab1, tab2 = st.tabs(["Content-Based Filtering", "Collaborative Filtering"])

    with tab1:
        st.write("B·∫°n ƒë√£ ch·ªçn **Content-Based Filtering**.")

    with tab2:
         st.subheader("Collaborative Filtering - KNNBaseline vs ALS")

# N·ªôi dung m√¥ t·∫£
         st.write("""
        **1. Chu·∫©n b·ªã d·ªØ li·ªáu:**
        - ƒê·ªçc v√† l√†m s·∫°ch d·ªØ li·ªáu (lo·∫°i b·ªè tr√πng l·∫∑p, gi·ªØ l·∫°i ƒë√°nh gi√° g·∫ßn nh·∫•t).
        - L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o file m·ªõi.

        **2. Kh√°m ph√° d·ªØ li·ªáu:**
        - Ph√¢n t√≠ch ph√¢n ph·ªëi s·ªë sao v√† s·ªë l∆∞·ª£ng ƒë√°nh gi√° tr√™n m·ªói s·∫£n ph·∫©m v√† kh√°ch h√†ng.

        **3. Ch·ªçn m√¥ h√¨nh:**
        - So s√°nh c√°c m√¥ h√¨nh (KNNBaseline t·ª´ Surprise v√† ALS) d·ª±a tr√™n RMSE, th·ªùi gian hu·∫•n luy·ªán v√† th·ªùi gian ki·ªÉm tra.

        **4. Hu·∫•n luy·ªán m√¥ h√¨nh:**
        - S·ª≠ d·ª•ng KNNBaseline t·ª´ Surprise ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.

        **5. ƒê√°nh gi√° m√¥ h√¨nh:**
        - Ki·ªÉm tra RMSE, MAE, th·ªùi gian hu·∫•n luy·ªán v√† th·ªùi gian ki·ªÉm tra.
        """)

        # K·∫øt qu·∫£ so s√°nh c√°c thu·∫≠t to√°n (di chuy·ªÉn m·ª•c n√†y v√†o ngay sau m·ª•c 5)
         st.subheader("K·∫øt qu·∫£ so s√°nh c√°c thu·∫≠t to√°n")

        # D·ªØ li·ªáu cho b·∫£ng ch·ªçn m√¥ h√¨nh
         model_comparison_data = {
            "Algorithm": ["KNNBaseline", "SVD++", "KNNBasic", "SVD", "KNNWithZScore", "KNNWithMeans", "BaselineOnly", "SlopeOne", "CoClustering", "NMF"],
            "Mean RMSE": [0.721577, 0.727282, 0.747729, 0.777478, 0.796437, 0.797296, 0.808854, 0.835495, 0.849559, 0.861742],
            "Mean MAE": [0.319179, 0.413897, 0.318029, 0.465879, 0.337843, 0.337929, 0.504948, 0.366483, 0.387690, 0.569235],
            "Execution Time (s)": [7.486039, 4.008024, 5.710793, 2.270491, 8.275915, 6.494299, 0.568223, 0.843610, 4.083520, 4.811119]
        }

        # Chuy·ªÉn d·ªØ li·ªáu th√†nh DataFrame v√† hi·ªÉn th·ªã b·∫£ng
         model_comparison_df = pd.DataFrame(model_comparison_data)

         st.write(model_comparison_df)

        # K·∫øt lu·∫≠n ch·ªçn KNNBaseline
         st.subheader("K·∫øt lu·∫≠n ch·ªçn m√¥ h√¨nh")
         st.write("""
        D·ª±a tr√™n b·∫£ng tr√™n, **KNNBaseline** c√≥ RMSE nh·ªè nh·∫•t (0.721577), ƒëi·ªÅu n√†y cho th·∫•y m√¥ h√¨nh n√†y c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t trong c√°c thu·∫≠t to√°n ƒë∆∞·ª£c so s√°nh.
        """)

        # M·ª•c 6: L∆∞u m√¥ h√¨nh
         st.subheader("6. L∆∞u m√¥ h√¨nh")
         st.write("""
        - L∆∞u m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán v√†o file `product_surprise.pkl`.
        """)

        # M·ª•c 7: Ti·∫øn h√†nh deploy
         st.subheader("7. Ti·∫øn h√†nh deploy")
         st.write("""
        - D·ª± ƒëo√°n ƒë√°nh gi√° cho c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√° v√† ƒë·ªÅ xu·∫•t c√°c s·∫£n ph·∫©m ph√π h·ª£p.
        """)

        # So s√°nh m√¥ h√¨nh
         st.subheader("So s√°nh m√¥ h√¨nh")

        # T·∫°o b·∫£ng so s√°nh m√¥ h√¨nh
         comparison_data = {
            "Ti√™u ch√≠": ["Hi·ªáu su·∫•t (Accuracy)", "Th·ªùi gian hu·∫•n luy·ªán", "Th·ªùi gian ki·ªÉm tra", "RMSE", "Time"],
            "M·ª•c ƒë√≠ch": [
                "ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh",
                "Th·ªùi gian ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh",
                "Th·ªùi gian ƒë·ªÉ m√¥ h√¨nh th·ª±c hi·ªán d·ª± ƒëo√°n",
                "ƒê√°nh gi√° ƒë·ªô l·ªách d·ª± ƒëo√°n",
                "T·ªïng th·ªùi gian hu·∫•n luy·ªán v√† ki·ªÉm tra"
            ],
            "KNNBaseline (Surprise)": [
                "RMSE: 0.7233",
                "0.67 gi√¢y",
                "0.52 - 0.70 gi√¢y",
                "0.7233",
                "Th·ªùi gian hu·∫•n luy·ªán nhanh, ki·ªÉm tra ch·∫•p nh·∫≠n ƒë∆∞·ª£c"
            ],
            "ALS (PySpark)": [
                "RMSE: 0.7381",
                "9.39 gi√¢y",
                "0.08 gi√¢y",
                "0.7381",
                "Th·ªùi gian hu·∫•n luy·ªán l√¢u, ki·ªÉm tra nhanh"
            ]
        }

        # Chuy·ªÉn d·ªØ li·ªáu th√†nh DataFrame v√† hi·ªÉn th·ªã b·∫£ng
         comparison_df = pd.DataFrame(comparison_data)
         st.write(comparison_df)

        # K·∫øt lu·∫≠n
         st.subheader("K·∫øt lu·∫≠n")
         st.write("""
        T·ª´ b·∫£ng tr√™n, c√≥ th·ªÉ th·∫•y:
        - **KNNBaseline** c√≥ th·ªùi gian hu·∫•n luy·ªán nhanh v√† RMSE th·∫•p h∆°n, trong khi 
        - **ALS** c√≥ th·ªùi gian ki·ªÉm tra r·∫•t nhanh nh∆∞ng th·ªùi gian hu·∫•n luy·ªán l√¢u h∆°n.
        """)



elif choice == 'H·ªá th·ªëng g·ª£i √Ω':
    st.header("H·ªá th·ªëng g·ª£i √Ω")

    # T·∫°o tab cho ph∆∞∆°ng ph√°p g·ª£i √Ω
    tab1, tab2 = st.tabs(["Content-Based Filtering", "Collaborative Filtering"])

    with tab1:
        st.subheader("üîç G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")

        # List of products to select from
        product_options = [(row['ten_san_pham'], row['ma_san_pham']) for _, row in limited_products.iterrows()]
        selected_product = st.selectbox(
            "Ch·ªçn s·∫£n ph·∫©m:",
            options=product_options,
            format_func=lambda x: x[0]
        )

        if selected_product:
            # Get selected product details
            ma_san_pham = selected_product[1]
            selected_product_row = df_products[df_products['ma_san_pham'] == ma_san_pham].iloc[0]
            gia_ban_formatted = f"{selected_product_row['gia_ban']:,.0f}".replace(",", ".")
            gia_goc_formatted = f"{selected_product_row['gia_goc']:,.0f}".replace(",", ".")
            
            # Display selected product
            st.write("### B·∫°n ƒë√£ ch·ªçn:")  
            st.write(f"**T√™n s·∫£n ph·∫©m:** {selected_product_row['ten_san_pham']}")
            st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
            st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")
        
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh s·∫£n ph·∫©m
            product_image = df_hinh[df_hinh['ma_san_pham'] == selected_product_row['ma_san_pham']]['hinh_anh'].values

            if len(product_image) > 0 and pd.notna(product_image[0]):
                image_path = product_image[0]
                
                # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh
                if image_path.lower().endswith(('png', 'jpg', 'jpeg')):  
                    st.image(image_path, use_container_width=True)  # Hi·ªÉn th·ªã ·∫£nh
                else:
                    st.write("**ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ª£p l·ªá.**")
            else:
                st.write("**Kh√¥ng c√≥ ·∫£nh s·∫£n ph·∫©m**")

        # Get recommendations for the selected product
        recommendations = get_recommendations(df_products, ma_san_pham, cosine_sim_new, df_hinh, nums=5)
        
        if not recommendations.empty:
            st.write("### C√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±:")
            display_recommended_products(recommendations, cols=3)  # Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± v·ªõi h√¨nh ·∫£nh
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m t∆∞∆°ng t·ª±.")

    with tab2:
        st.subheader("üë§ G·ª£i √Ω s·∫£n ph·∫©m theo m√£ kh√°ch h√†ng")

        # Nh·∫≠p th√¥ng tin kh√°ch h√†ng
        with st.expander("Nh·∫≠p th√¥ng tin kh√°ch h√†ng"):
            input_customer_name = st.text_input("Nh·∫≠p t√™n kh√°ch h√†ng:")
            input_customer_id = st.text_input("Nh·∫≠p m√£ kh√°ch h√†ng:")

        # Danh s√°ch kh√°ch h√†ng ƒë·ªÉ ch·ªçn
        customer_options = [(row['ho_ten'], row['userId']) for _, row in limited_customers.iterrows()]

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p th√¥ng tin
        if not input_customer_name and not input_customer_id:
            st.write("### Ho·∫∑c ch·ªçn kh√°ch h√†ng t·ª´ danh s√°ch:")
            selected_customer = st.selectbox(
                "Ch·ªçn kh√°ch h√†ng:",
                options=customer_options,
                format_func=lambda x: x[0]
            )
        else:
            selected_customer = None  # ·∫®n l·ª±a ch·ªçn kh√°ch h√†ng n·∫øu ƒë√£ nh·∫≠p th√¥ng tin

        # Ki·ªÉm tra th√¥ng tin kh√°ch h√†ng nh·∫≠p v√†o
        user_id = None
        if input_customer_name:
            matched_customer = [cust for cust in customer_options if cust[0] == input_customer_name]
            if matched_customer:
                user_id = matched_customer[0][1]
                customer_name = matched_customer[0][0]
            else:
                st.error("T√™n kh√°ch h√†ng kh√¥ng c√≥ trong danh s√°ch.")
        elif input_customer_id:
            matched_customer = [cust for cust in customer_options if cust[1] == int(input_customer_id)]
            if matched_customer:
                user_id = matched_customer[0][1]
                customer_name = matched_customer[0][0]
            else:
                st.error("M√£ kh√°ch h√†ng kh√¥ng c√≥ trong danh s√°ch.")
        elif selected_customer:
            user_id = selected_customer[1]
            customer_name = selected_customer[0]

        if user_id:
            st.write(f"### Kh√°ch h√†ng ƒë√£ ch·ªçn: {customer_name}")
            recommendations = recommendation_by_user(user_id, df, df_products, algorithm_loaded)
            display_recommended_products(recommendations)
